@using Microsoft.AspNetCore.Components.Web
@using AutoScheduler.Models
@using AutoScheduler.Services
@inject JsonFileBacklogItemService BacklogService
@inject JsonFileSchedulerService SchedulerService

@if (!BacklogService.GetBacklog().Any(x => x.Completed == false || x.Completed == null))
{
    <p class="text-center my-5">You're all done! Maybe take a walk?</p>
}

@foreach (var item in BacklogService.GetBacklog().Reverse()) 
{
    if (item.Completed == null || item.Completed == false) 
    {
        <div class='card mb-3'>
            <div class='card-body row align-items-center justify-content-between'>
                <div class='col-md-5 col-lg-8'>
                    <h4 class='card-title'>@item.Name</h4>
                    <p class='card-subtitle small'><em>Category: @item.Category</em></p>
                </div>
                <div class='col-md-7 col-lg-4 row align-items-center'>
                    <div class='col-3 text-center'>
                        <i class="bi bi-hourglass-split" style="font-size: 2rem;"></i>
                        <br />
                        <small class="text-muted">@item.Length</small>
                    </div>
                    <div class='col-3 text-center'>
                        <i class=@GetPrioritySymbol(item.Priority) style="font-size: 2rem;"></i>
                        <br />
                        <small class="text-muted">priority</small>
                    </div>
                    <div class="col-3 d-flex justify-content-center">
                        <button class="btn btn-danger" @onclick="(e => RemoveItem(item.Id))">
                            <i class="bi bi-trash" style="font-size: 1.5rem;"></i>
                        </button>
                    </div>
                    <div class="col-3 d-flex justify-content-center">
                        <button class="btn btn-success" @onclick="(e => ChangeStatus(item.Id))">
                            <i class="bi bi-check-circle" style="font-size: 1.5rem;"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
}

<div class='row my-4'>
    @if (!Collapsed)
    {
        <h3 class='display-6 col'>Completed</h3>
    }

    <button 
        class="btn collapsed col" 
        type="button" 
        data-bs-toggle="collapse" 
        data-bs-target="#collapseCompleted" 
        aria-expanded="false" aria-controls="collapseExample"
        @onclick="(e => ToggleCollapse())"
    >
        @(Collapsed ? "Show Completed" : "Hide Completed")
    </button>
</div>

<div class="collapse" id="collapseCompleted" style="">
    @if (BacklogService.GetBacklog().Any(x => x.Completed == true) == false)
    {
        <p class="text-center my-5">Nothing completed... yet</p>
    }

    @foreach (var item in BacklogService.GetBacklog().OrderByDescending(x => x.CompletedDateTime)) 
    {
        if (item.Completed == true) 
        {
            <div class='card mb-3'>
                <div class='card-body row align-items-center justify-content-between bg-success bg-gradient text-white'>
                    <div class='col-md-5 col-lg-8'>
                        <h4 class='card-title'>@item.Name</h4>
                        <p class='card-subtitle'><em>Category: @item.Category</em></p>
                    </div>
                    <div class='col-md-7 col-lg-4 row'>
                        <div class='col-3 offset-6 d-flex justify-content-center'>
                            <button class="btn btn-danger mx-2" @onclick="(e => RemoveItem(item.Id))">
                                <i class="bi bi-trash" style="font-size: 1.5rem;"></i>
                            </button>
                        </div>
                        <div class="col-3 d-flex justify-content-center">
                            <button class="btn btn-warning mx-2" @onclick="(e => ChangeStatus(item.Id))">
                                <i class="bi bi-arrow-counterclockwise" style="font-size: 1.5rem;"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</div>



@code 
{
    Boolean Collapsed = true;
    void ChangeStatus(string id) 
    {
        BacklogService.ChangeCompletedStatus(id);
        BacklogItem SelectedItem = BacklogService.GetBacklog().First(x => x.Id == id);
        Console.WriteLine($"{SelectedItem.Name} status changed");
    }

    void RemoveItem(string id) 
    {
        BacklogService.RemoveItemFromBacklog(id);
        Console.WriteLine($"{id} removed from backlog");
        SchedulerService.RemoveItemFromSchedule(id);
        Console.WriteLine($"{id} removed from schedule");
    }

    void ToggleCollapse() {
        Collapsed = !Collapsed;
    }

    string GetPrioritySymbol(string priority)
    {
        string result = "bi bi-diamond";

        if (priority == "high")
        {
            return $"{result}-fill text-danger";
        }
        else if (priority == "mid")
        {
            return $"{result}-half text-warning";
        }

        return $"{result} text-info";
    }
}
